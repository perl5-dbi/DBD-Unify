.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 2024-01-05 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DBD::Unify \- DBI driver for Unify database systems
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\& # Examples marked NYT are Not Yet Tested, they might work
\& #  all others have been tested.
\& # man DBI for explanation of each method (there\*(Aqs more than listed here)
\&
\& $dbh = DBI\->connect ("DBI:Unify:[\e$dbname]", "", $schema, {
\&                         AutoCommit    => 0,
\&                         ChopBlanks    => 1,
\&                         uni_unicode   => 0,
\&                         uni_verbose   => 0,
\&                         uni_scanlevel => 2,
\&                         });
\& $dbh = DBI\->connect_cached (...);                   # NYT
\& $dbh\->do ($statement);
\& $dbh\->do ($statement, \e%attr);
\& $dbh\->do ($statement, \e%attr, @bind);
\& $dbh\->commit;
\& $dbh\->rollback;
\& $dbh\->disconnect;
\&
\& $all = $dbh\->selectall_arrayref ($statement);
\& @row = $dbh\->selectrow_array ($statement);
\& $col = $dbh\->selectcol_arrayref ($statement);
\&
\& $sth = $dbh\->prepare ($statement);
\& $sth = $dbh\->prepare ($statement, \e%attr);
\& $sth = $dbh\->prepare_cached ($statement);           # NYT
\& $sth\->execute;
\& @row = $sth\->fetchrow_array;
\& $row = $sth\->fetchrow_arrayref;
\& $row = $sth\->fetchrow_hashref;
\& $all = $sth\->fetchall_arrayref;
\& $sth\->finish;
\&
\& # Statement has placeholders like where field = ?
\& $sth = $dbh\->prepare ($statement);
\& $sth\->bind_param ($p_num, $bind_value);             # NYT
\& $sth\->bind_param ($p_num, $bind_value, $bind_type); # NYT
\& $sth\->bind_param ($p_num, $bind_value, \e%attr);     # NYT
\& $sth\->bind_col ($col_num, \e$col_variable);          # NYT
\& $sth\->bind_columns (@list_of_refs_to_vars_to_bind);
\& $sth\->execute (@bind_values);
\&
\& $cnt = $sth\->rows;
\&
\& $sql = $dbh\->quote ($string);
\&
\& $err = $dbh\->err;
\& $err = $sth\->err;
\& $str = $dbh\->errstr;
\& $str = $sth\->errstr;
\& $stt = $dbh\->state;
\& $stt = $sth\->state;
\&
\& For large DB fetches the combination $sth\->bind_columns ()
\& with $sth\->fetchrow_arrayref is the fastest (DBI
\& documentation).
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
DBD::Unify is an extension to Perl which allows access to Unify
databases. It is built on top of the standard DBI extension and
implements the methods that DBI requires.
.PP
This document describes the differences between the "generic" DBD
and DBD::Unify.
.SS Extensions/Changes
.IX Subsection "Extensions/Changes"
.IP "returned types" 2
.IX Item "returned types"
The DBI docs state that:
.Sp
.Vb 5
\&   Most data is returned to the perl script as strings (null values
\&   are returned as undef).  This allows arbitrary precision numeric
\&   data to be handled without loss of accuracy.  Be aware that perl
\&   may  not preserve the same accuracy when the string is used as a
\&   number.
.Ve
.Sp
Integers are returned as integer values (perl's IV's).
.Sp
(Huge) amounts, floats, reals and doubles are returned as strings for which
numeric context (perl's NV's) has been invoked already, so adding zero to
force convert to numeric context is not needed.
.Sp
Chars are returned as strings (perl's PV's).
.Sp
Chars, Dates, Huge Dates and Times are returned as strings (perl's PV's).
Unify represents midnight with 00:00, not 24:00.
.IP connect 2
.IX Item "connect"
.Vb 1
\&    connect ("DBI:Unify:dbname[;options]" [, user [, auth [, attr]]]);
.Ve
.Sp
Options to the connection are passed in the data-source
argument. This argument should contain the database
name possibly followed by a semicolon and the database options
which are ignored.
.Sp
Since Unify database authorization is done using grant's using the
user name, the \fIuser\fR argument may be empty or undef. The \fIauth\fR
field will be used as a default schema. If the \fIauth\fR field is empty
or undefined connect will check for the environment variable \f(CW$USCHEMA\fR
to use as a default schema. If neither exists, you will end up in your
default schema, or if none is assigned, in the schema PUBLIC.
.Sp
At the moment none of the attributes documented in DBI's "ATTRIBUTES
COMMON TO ALL HANDLES" are implemented specifically for the Unify
DBD driver, but they might have been inherited from DBI. The \fIChopBlanks\fR
attribute is implemented, but defaults to 1 for DBD::Unify.
The Unify driver supports "uni_scanlevel" to set the transaction scan
level to a value between 1 and 16 and "uni_verbose" to set DBD specific
debugging, allowing to show only massages from DBD-Unify without using
the default DBI\->trace () call.
.Sp
The connect call will result in statements like:
.Sp
.Vb 3
\&    CONNECT;
\&    SET CURRENT SCHEMA TO PUBLIC;  \-\- if auth = "PUBLIC"
\&    SET TRANSACTION SCAN LEVEL 7;  \-\- if attr has { uni_scanlevel => 7 }
.Ve
.Sp
local database
.Sp
.Vb 1
\&    connect ("/data/db/unify/v63AB", "", "SYS")
.Ve
.IP AutoCommit 2
.IX Item "AutoCommit"
It is recommended that the \f(CW\*(C`connect\*(C'\fR call ends with the attributes
{\ AutoCommit\ = 0 }>, although it is not implemented (yet).
.Sp
If you don't want to check for errors after \fBevery\fR call use
{\ AutoCommit\ = 0, RaiseError => 1 }> instead. This will \f(CW\*(C`die\*(C'\fR with
an error message if any DBI call fails.
.IP Unicode 2
.IX Item "Unicode"
By default, this driver is completely Unicode unaware: what you put into
the database will be returned to you without the encoding applied.
.Sp
To enable automatic decoding of UTF\-8 when fetching from the database,
set the \f(CW\*(C`uni_unicode\*(C'\fR attribute to a true value for the database handle
(statement handles will inherit) or to the statement handle.
.Sp
.Vb 1
\&  $dbh\->{uni_unicode} = 1;
.Ve
.Sp
When CHAR or TEXT fields are retrieved and the content fetched is valid
UTF\-8, the value will be marked as such.
.IP re-connect 2
.IX Item "re-connect"
Though both the syntax and the module support connecting to different
databases, even at the same time, the Unify libraries seem to quit
connecting to a new database, even if the old one is closed following
every rule of precaution.
.Sp
To be safe in closing a handle of all sorts, undef it after it is done with,
it will than be destroyed. (As of 0.12 this is tried internally for handles
that proved to be finished)
.Sp
explicit:
.Sp
.Vb 5
\& my $dbh = DBI\->connect (...);
\& my $sth = $dbh\->prepare (...);
\& :
\& $sth\->finish;     undef $sth;
\& $dbh\->disconnect; undef $dbh;
.Ve
.Sp
or implicit:
.Sp
.Vb 8
\& {   my $dbh = DBI\->connect (...);
\&     {   my $sth = $dbh\->prepare (...);
\&         while (my @data = $sth\->fetchrow_array) {
\&             :
\&             }
\&         }  # $sth implicitly destroyed by end\-of\-scope
\&     $dbh\->disconnect;
\&     }  # $dbh implicitly destroyed by end\-of\-scope
.Ve
.IP do 2
.IX Item "do"
.Vb 1
\& $dbh\->do ($statement)
.Ve
.Sp
This is implemented as a call to 'EXECUTE IMMEDIATE' with all the
limitations that this implies.
.IP "commit and rollback invalidates open cursors" 2
.IX Item "commit and rollback invalidates open cursors"
DBD::Unify does warn when a commit or rollback is issued on a \f(CW$dbh\fR
with open cursors.
.Sp
Possibly a commit/rollback/disconnect should also undef the \f(CW$sth\fR's.
(This should probably be done in the DBI-layer as other drivers will
have the same problems).
.Sp
After a commit or rollback the cursors are all \->finish'ed, i.e. they
are closed and the DBI/DBD will warn if an attempt is made to fetch
from them.
.Sp
A future version of DBD::Unify might re-prepare the statement.
.SS "Stuff implemented in perl"
.IX Subsection "Stuff implemented in perl"
.IP driver 2
.IX Item "driver"
Just here for DBI. No use in telling the end-user what to do with it :)
.IP connect 2
.IX Item "connect"
.PD 0
.IP data_sources 2
.IX Item "data_sources"
.PD
There is no way for Unify to tell what data sources might be available.
There is no central files (like \fI/etc/oratab\fR for Oracle) that lists all
available sources, so this method will always return an empty list.
.IP quote_identifier 2
.IX Item "quote_identifier"
As DBI's \f(CW\*(C`quote_identifier ()\*(C'\fR gladly accepts the empty string as a
valid identifier, I have to override this method to translate empty
strings to undef, so the method behaves properly. Unify does not allow
to select \f(CW\*(C`NULL\*(C'\fR as a constant as in:
.Sp
.Vb 1
\&    select NULL, foo from bar;
.Ve
.IP "prepare ($statement [, \e%attr])" 2
.IX Item "prepare ($statement [, %attr])"
The only attribute currently supported is the \f(CW\*(C`dbd_verbose\*(C'\fR (or its
alias \f(CW\*(C`uni_verbose\*(C'\fR) level. See "trace" below.
.IP "table_info ($;$$$$)" 2
.IX Item "table_info ($;$$$$)"
.PD 0
.IP "columne_info ($$$$)" 2
.IX Item "columne_info ($$$$)"
.IP "foreign_key_info ($$$$$$;$)" 2
.IX Item "foreign_key_info ($$$$$$;$)"
.IP "link_info ($;$$$$)" 2
.IX Item "link_info ($;$$$$)"
.IP "primary_key ($$$)" 2
.IX Item "primary_key ($$$)"
.IP "uni_clear_cache ()" 2
.IX Item "uni_clear_cache ()"
.PD
Note that these five get their info by accessing the \f(CW\*(C`SYS\*(C'\fR schema which
is relatively extremely slow. e.g. Getting all the primary keys might well
run into seconds, rather than milliseconds.
.Sp
This is work-in-progress, and we hope to find faster ways to get to this
information. Also note that in order to keep it fast across multiple calls,
some information is cached, so when you alter the data dictionary after a
call to one of these, that cached information is not updated.
.Sp
For \f(CW\*(C`column_info ()\*(C'\fR, the returned \f(CW\*(C`DATA_TYPE\*(C'\fR is deduced from the
\&\f(CW\*(C`TYPE_NAME\*(C'\fR returned from \f(CW\*(C`SYS.ACCESSIBLE_COLUMNS\*(C'\fR. The type is in
the ODBC range and the original Unify type and type_name are returned
in the additional fields \f(CW\*(C`uni_type\*(C'\fR and \f(CW\*(C`uni_type_name\*(C'\fR. Somehow
selecting from that table does not return valid statement handles for
types \f(CW\*(C`currency\*(C'\fR and \f(CW\*(C`huge integer\*(C'\fR.
.Sp
.Vb 10
\&  Create as           sth attributes       uni_type/uni_type_name
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  amount              FLOAT             6   \-4 AMOUNT (9, 2)
\&  amount (5, 2)       FLOAT             6   \-4 AMOUNT (5, 2)
\&  huge amount         REAL              7   \-6 HUGE AMOUNT (15, 2)
\&  huge amount (5, 2)  REAL              7   \-6 HUGE AMOUNT (5, 2)
\&  huge amount (15, 2) REAL              7   \-6 HUGE AMOUNT (15, 2)
\&  byte                BINARY           \-2  \-12 BYTE (1)
\&  byte (512)          BINARY           \-2  \-12 BYTE (512)
\&  char                CHAR              1    1 CHAR (1)
\&  char (12)           CHAR              1    1 CHAR (12)
\&  currency            DECIMAL           3    \- ?
\&  currency (9)        DECIMAL           3    \- ?
\&  currency (7,2)      DECIMAL           3    \- ?
\&  date                DATE              9   \-3 DATE
\&  huge date           TIMESTAMP        11  \-11 HUGE DATE
\&  decimal             NUMERIC           2    2 NUMERIC (9)
\&  decimal (2)         NUMERIC           2    2 NUMERIC (2)
\&  decimal (8)         NUMERIC           2    2 NUMERIC (8)
\&  double precision    DOUBLE PRECISION  8    8 DOUBLE PRECISION (64)
\&  float               DOUBLE PRECISION  8    6 FLOAT (64)
\&  huge integer        HUGE INTEGER     \-5    \- ?
\&  integer             NUMERIC           2    2 NUMERIC (9)
\&  numeric             NUMERIC           2    2 NUMERIC (9)
\&  numeric (2)         SMALLINT          5    2 NUMERIC (2)
\&  numeric (6)         NUMERIC           2    2 NUMERIC (6)
\&  real                REAL              7    7 REAL (32)
\&  smallint            SMALLINT          5    2 NUMERIC (4)
\&  text                TEXT             \-1   \-9 TEXT
\&  time                TIME             10   \-7 TIME
.Ve
.Sp
Currently the driver tries to cache information about the schema as it
is required. When there are fields added, removed, or altered, references
are added or removed or primary keys or unique hashes are added or removed
it is wise to call \f(CW\*(C`$dbh\->uni_clear_cache\*(C'\fR to ensure that the info
on next inquiries will be up to date.
.IP ping 2
.IX Item "ping"
.SS "Stuff implemented in C (XS)"
.IX Subsection "Stuff implemented in C (XS)"
.PD 0
.IP trace 2
.IX Item "trace"
.PD
The \f(CW\*(C`DBI\->trace (level)\*(C'\fR call will promote the level to DBD::Unify,
showing both the DBI layer debugging messages as well as the DBD::Unify
specific driver-side debug messages.
.Sp
It is however also possible to trace \fBonly\fR the DBD-Unify without the
\&\f(CW\*(C`DBI\->trace ()\*(C'\fR call by using the \f(CW\*(C`uni_verbose\*(C'\fR attribute on \f(CW\*(C`connect ()\*(C'\fR
or by setting it later to the database handle, the default level is set from
the environment variable \f(CW$DBD_TRACE\fR if defined:
.Sp
.Vb 2
\&  $dbh = DBI\->connect ("DBI::Unify", "", "", { uni_verbose => 3 });
\&  $dbh\->{uni_verbose} = 3;
.Ve
.Sp
As DBD::Oracle also supports this scheme since version 1.22, \f(CW\*(C`dbd_verbose\*(C'\fR
is a portable alias for \f(CW\*(C`uni_verbose\*(C'\fR, which is also supported in DBD::Oracle.
.Sp
DBD::Unify now also allows an even finer grained debugging, by allowing
\&\f(CW\*(C`dbd_verbose\*(C'\fR on statement handles too. The default \f(CW\*(C`dbd_verbose\*(C'\fR for
statement handles is the global \f(CW\*(C`dbd_verbose\*(C'\fR at creation time of the
statement handle.
.Sp
The environment variable \f(CW\*(C`DBD_VERBOSE\*(C'\fR is used if defined and overrules
\&\f(CW$DBD_TRACE\fR.
.Sp
.Vb 4
\&  $dbh\->{dbd_verbose} = 4;
\&  $sth = $dbh\->prepare ("select * from foo");  # sth\*(Aqs dbd_verbose = 4
\&  $dbh\->{dbd_verbose} = 3;                     # sth\*(Aqs dbd_verbose = 4
\&  $sth\->{dbd_verbose} = 5;                     # now 5
.Ve
.Sp
Currently, the following levels are defined:
.RS 2
.IP "1 & 2" 2
.IX Item "1 & 2"
No DBD messages implemented at level 1 and 2, as they are reserved for DBI
.IP 3 2
.IX Item "3"
.Vb 10
\&  DBD::Unify::dbd_db_STORE (ScanLevel = 7)
\&  DBD::Unify::st_prepare u_sql_00_000000 ("select * from foo")
\&  DBD::Unify::st_prepare u_sql_00_000000 (<= 4, => 0)
\&  DBD::Unify::st_execute u_sql_00_000000
\&  DBD::Unify::st_destroy \*(Aqselect * from parm\*(Aq
\&  DBD::Unify::st_free u_sql_00_000000
\&  DBD::Unify::st 0x7F7F25CC 0x0000 0x0000 0x00000000 0x00000000 0x00000000
\&  DBD::Unify::st destroyed
\&  DBD::Unify::db_disconnect
\&  DBD::Unify::db_destroy
.Ve
.IP 4 2
.IX Item "4"
Level 3 plus errors and additional return codes and field types and values:
.Sp
.Vb 10
\&  DBD::Unify::st_prepare u_sql_00_000000 ("select c_bar from foo where c_foo = 1")
\&      After allocate, sqlcode = 0
\&      After prepare,  sqlcode = 0
\&      After allocate, sqlcode = 0
\&      After describe, sqlcode = 0
\&      After count,    sqlcode = 0, count = 1
\&  DBD::Unify::fld_describe o_sql_00_000000 (1 fields)
\&      After get,      sqlcode = 0
\&  DBD::Unify::st_prepare u_sql_00_000000 (<= 1, => 0)
\&  DBD::Unify::st_execute u_sql_00_000000
\&      After open,     sqlcode = 0 (=> 0)
\&  DBD::Unify::st_fetch u_sql_00_000000
\&      Fetched         sqlcode = 0, fields = 1
\&      After get,      sqlcode = 0
\&       Field   1: c_bar: NUMERIC  4: (6030) 6030 ==
\&       Fetch done
\&  DBD::Unify::st_finish u_sql_00_000000
\&      After close,    sqlcode = 0
\&  DBD::Unify::st_destroy \*(Aqselect c_bar from foo where c_foo = 1\*(Aq
\&  DBD::Unify::st_free u_sql_00_000000
\&      After deallocO, sqlcode = 0
\&      After deallocU, sqlcode = 0
.Ve
.IP 5 2
.IX Item "5"
Level 4 plus some content info:
.Sp
.Vb 5
\&  DBD::Unify::st_fetch u_sql_00_000000
\&      Fetched         sqlcode = 0, fields = 1
\&      After get,      sqlcode = 0
\&       Field   1: [05 00 04 00 00] c_bar: NUMERIC  4: (6030) 6030 ==
\&       Fetch done
.Ve
.IP 6 2
.IX Item "6"
Level 5 plus internal coding for exchanges and low(er) level return codes:
.Sp
.Vb 4
\&  DBD::Unify::fld_describe o_sql_00_000000 (1 fields)
\&      After get,      sqlcode = 0
\&       Field   1: [05 00 04 00 FFFFFFFF] c_bar
\&  DBD::Unify::st_prepare u_sql_00_000000 (<= 1, => 0)
.Ve
.IP 7 2
.IX Item "7"
Level 6 plus destroy/cleanup states:
.Sp
.Vb 4
\&  DBD::Unify::st_free u_sql_00_000000
\&   destroy allocc destroy alloco    After deallocO, sqlcode = 0
\&   destroy alloci destroy allocp    After deallocU, sqlcode = 0
\&   destroy stat destroy growup destroy impset
.Ve
.IP 8 2
.IX Item "8"
No messages (yet) set to level 8 and up.
.RE
.RS 2
.RE
.IP "int  dbd_bind_ph (SV *sth, imp_sth_t *imp_sth, SV *param, SV *value, IV sql_type, SV *attribs, int is_inout, IV maxlen)" 2
.IX Item "int dbd_bind_ph (SV *sth, imp_sth_t *imp_sth, SV *param, SV *value, IV sql_type, SV *attribs, int is_inout, IV maxlen)"
.PD 0
.IP "SV  *dbd_db_FETCH_attrib (SV *dbh, imp_dbh_t *imp_dbh, SV *keysv)" 2
.IX Item "SV *dbd_db_FETCH_attrib (SV *dbh, imp_dbh_t *imp_dbh, SV *keysv)"
.IP "int  dbd_db_STORE_attrib (SV *dbh, imp_dbh_t *imp_dbh, SV *keysv, SV *valuesv)" 2
.IX Item "int dbd_db_STORE_attrib (SV *dbh, imp_dbh_t *imp_dbh, SV *keysv, SV *valuesv)"
.IP "int  dbd_db_commit (SV *dbh, imp_dbh_t *imp_dbh)" 2
.IX Item "int dbd_db_commit (SV *dbh, imp_dbh_t *imp_dbh)"
.IP "void dbd_db_destroy (SV *dbh, imp_dbh_t *imp_dbh)" 2
.IX Item "void dbd_db_destroy (SV *dbh, imp_dbh_t *imp_dbh)"
.IP "int  dbd_db_disconnect (SV *dbh, imp_dbh_t *imp_dbh)" 2
.IX Item "int dbd_db_disconnect (SV *dbh, imp_dbh_t *imp_dbh)"
.IP "int  dbd_db_do (SV *dbh, char *statement)" 2
.IX Item "int dbd_db_do (SV *dbh, char *statement)"
.IP "int  dbd_db_login (SV *dbh, imp_dbh_t *imp_dbh, char *dbname, char *user, char *pwd)" 2
.IX Item "int dbd_db_login (SV *dbh, imp_dbh_t *imp_dbh, char *dbname, char *user, char *pwd)"
.IP "int  dbd_db_rollback (SV *dbh, imp_dbh_t *imp_dbh)" 2
.IX Item "int dbd_db_rollback (SV *dbh, imp_dbh_t *imp_dbh)"
.IP "int  dbd_discon_all (SV *drh, imp_drh_t *imp_drh)" 2
.IX Item "int dbd_discon_all (SV *drh, imp_drh_t *imp_drh)"
.IP "int  dbd_fld_describe (SV *dbh, imp_sth_t *imp_sth, int num_fields)" 2
.IX Item "int dbd_fld_describe (SV *dbh, imp_sth_t *imp_sth, int num_fields)"
.IP "void dbd_init (dbistate_t *dbistate)" 2
.IX Item "void dbd_init (dbistate_t *dbistate)"
.IP "int  dbd_prm_describe (SV *dbh, imp_sth_t *imp_sth, int num_params)" 2
.IX Item "int dbd_prm_describe (SV *dbh, imp_sth_t *imp_sth, int num_params)"
.IP "SV  *dbd_st_FETCH_attrib (SV *sth, imp_sth_t *imp_sth, SV *keysv)" 2
.IX Item "SV *dbd_st_FETCH_attrib (SV *sth, imp_sth_t *imp_sth, SV *keysv)"
.IP "int  dbd_st_STORE_attrib (SV *sth, imp_sth_t *imp_sth, SV *keysv, SV *valuesv)" 2
.IX Item "int dbd_st_STORE_attrib (SV *sth, imp_sth_t *imp_sth, SV *keysv, SV *valuesv)"
.IP "int  dbd_st_blob_read (SV *sth, imp_sth_t *imp_sth, int field, long offset, long len, SV *destrv, long destoffset)" 2
.IX Item "int dbd_st_blob_read (SV *sth, imp_sth_t *imp_sth, int field, long offset, long len, SV *destrv, long destoffset)"
.IP "void dbd_st_destroy (SV *sth, imp_sth_t *imp_sth)" 2
.IX Item "void dbd_st_destroy (SV *sth, imp_sth_t *imp_sth)"
.IP "int  dbd_st_execute (SV *sth, imp_sth_t *imp_sth)" 2
.IX Item "int dbd_st_execute (SV *sth, imp_sth_t *imp_sth)"
.IP "AV  *dbd_st_fetch (SV *sth, imp_sth_t *imp_sth)" 2
.IX Item "AV *dbd_st_fetch (SV *sth, imp_sth_t *imp_sth)"
.IP "int  dbd_st_finish (SV *sth, imp_sth_t *imp_sth)" 2
.IX Item "int dbd_st_finish (SV *sth, imp_sth_t *imp_sth)"
.IP "int  dbd_st_prepare (SV *sth, imp_sth_t *imp_sth, char *statement, SV *attribs)" 2
.IX Item "int dbd_st_prepare (SV *sth, imp_sth_t *imp_sth, char *statement, SV *attribs)"
.IP "int  dbd_st_rows (SV *sth, imp_sth_t *imp_sth)" 2
.IX Item "int dbd_st_rows (SV *sth, imp_sth_t *imp_sth)"
.PD
.SS "DBD specific functions"
.IX Subsection "DBD specific functions"
\fIdb_dict\fR
.IX Subsection "db_dict"
.PP
Query the data dictionary through HLI calls:
.PP
.Vb 3
\& my $dd = $dbh\->func (   "db_dict");
\& my $dd = $dbh\->func (0, "db_dict"); # same
\& my $dd = $dbh\->func (1, "db_dict"); # force reload
.Ve
.PP
This function returns the data dictionary of the database in a hashref. The
dictionary contains all information accessible to the current user and will
likely contain all accessible schema's, tables, columns, and simple links
(referential integrity).
.PP
The force_reload argument is useful if the data dictionary might have changed:
adding/removing tables/links/primary keys, altering tables etc.
.PP
The dictionary will have 4 entries
.IP TYPE 2
.IX Xref "TYPE"
.IX Item "TYPE"
.Vb 1
\& my $types = $dd\->{TYPE};
.Ve
.Sp
This holds a list with the native type descriptions of the \f(CW\*(C`TYPE\*(C'\fR entries
in the \f(CW\*(C`COLUMN\*(C'\fR hashes.
.Sp
.Vb 1
\& say $dd\->{TYPE}[3]; # DATE
.Ve
.IP AUTH 2
.IX Xref "AUTH"
.IX Item "AUTH"
.Vb 1
\& my $schemas = $dd\->{AUTH};
.Ve
.Sp
This will return a reference to a list of accessible schema's. The schema's
that are not accessible or do not exist (anymore) have an \f(CW\*(C`undef\*(C'\fR entry.
.Sp
Each auth entry is \f(CW\*(C`undef\*(C'\fR or a hashref with these entries:
.RS 2
.IP AID 2
.IX Xref "AID"
.IX Item "AID"
Holds the AUTH ID of the schema (INTEGER). In the current implementation,
the \f(CW\*(C`AID\*(C'\fR entry is identical to the index in the list
.Sp
.Vb 2
\& say $schemas\->[3]{AID};
\& # 3
.Ve
.IP NAME 2
.IX Xref "NAME"
.IX Item "NAME"
Holds the name of the schema (STRING)
.Sp
.Vb 2
\& say $schemas\->[3]{NAME};
\& # DBUTIL
.Ve
.IP TABLES 2
.IX Xref "TABLES"
.IX Item "TABLES"
Holds the list of accessible table ID's in this schema (ARRAY of INTEGER's)
.Sp
.Vb 2
\& say join ", " => $schemas\->[3]{TABLES};
\& # 43, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61
.Ve
.RE
.RS 2
.RE
.IP TABLE 2
.IX Xref "TABLE"
.IX Item "TABLE"
.Vb 1
\& my $tables = $dd\->{TABLE};
.Ve
.Sp
This will return a reference to a list of accessible tables. The tables
that are not accessible or do not exist (anymore) have an \f(CW\*(C`undef\*(C'\fR entry.
.Sp
Each table entry is \f(CW\*(C`undef\*(C'\fR or a hashref with these entries:
.RS 2
.IP AID 2
.IX Xref "AID"
.IX Item "AID"
Holds the AUTH ID (INTEGER) of the schema this table belongs to.
.Sp
.Vb 2
\& say $tables\->[43]{AID};
\& # 3
.Ve
.IP ANAME 2
.IX Xref "ANAME"
.IX Item "ANAME"
Holds the name of the schema this table belongs too.
.Sp
.Vb 2
\& say $tables\->[43]{NAME};
\& # UTLATH
.Ve
.IP TID 2
.IX Xref "TID"
.IX Item "TID"
Holds the TABLE ID of the table (INTEGER). In the current implementation,
the \f(CW\*(C`TID\*(C'\fR entry is identical to the index in the list
.Sp
.Vb 2
\& say $tables\->[43]{TID};
\& # 43
.Ve
.IP NAME 2
.IX Xref "NAME"
.IX Item "NAME"
Holds the name of the table
.Sp
.Vb 2
\& say $tables\->[43]{NAME};
\& # UTLATH
.Ve
.IP KEY 2
.IX Xref "KEY"
.IX Item "KEY"
Holds a list of column indices (\f(CW\*(C`CID\*(C'\fR's) of the columns that are the
primary key of this table. The list can be empty if the table has no
primary key.
.Sp
.Vb 2
\& say for @{$tables\->[43]{KEY}};
\& # 186
.Ve
.IP CGRP 2
.IX Xref "CGRP"
.IX Item "CGRP"
Holds a list of column groups for this table (if any).
.Sp
.Vb 1
\& my $cgrp = $dd\->{TABLE}[59];
.Ve
.Sp
Each entry in the list holds a has with the following entries
.RS 2
.IP CID 2
.IX Xref "CID"
.IX Item "CID"
Holds the column ID of this column group
.Sp
.Vb 2
\& say $cgrp\->[0]{CID}
\& # 260
.Ve
.IP TYPE 2
.IX Xref "TYPE"
.IX Item "TYPE"
Holds the type of this group. This will always be \f(CW100\fR.
.Sp
.Vb 2
\& say $cgrp\->[0]{TYPE}
\& # 100
.Ve
.IP COLUMNS 2
.IX Xref "COLUMNS"
.IX Item "COLUMNS"
Holds the list of \f(CW\*(C`CID\*(C'\fRs this group consists of
.Sp
.Vb 3
\& say for @{$cgrp\->[0]{COLUMNS}}
\& # 255
\& # 256
.Ve
.RE
.RS 2
.RE
.IP DIRECTKEY 2
.IX Xref "DIRECTKEY"
.IX Item "DIRECTKEY"
Holds a true/false indication of the table being \f(CW\*(C`DIRECT\-KEYED\*(C'\fR.
.Sp
.Vb 2
\& say $tables\->[43]{DIRECTKEY}
\& # 1
.Ve
.IP FIXEDSIZE 2
.IX Xref "FIXEDSIZE"
.IX Item "FIXEDSIZE"
Holds a true/false indication of the table being of fixed size.
See also EXPNUM
.IP EXPNUM 2
.IX Xref "EXPNUM"
.IX Item "EXPNUM"
If FIXEDNUM is true, this entry holds the number of records of the table
.IP OPTIONS 2
.IX Xref "OPTIONS"
.IX Item "OPTIONS"
.PD 0
.IP PKEYED 2
.IX Xref "PKEYED"
.IX Item "PKEYED"
.PD
Holds a true/false indication of the table being primary keyed
.IP SCATTERED 2
.IX Xref "SCATTERED"
.IX Item "SCATTERED"
Holds a true/false indication if the table has data scattered across volumes
.IP COLUMNS 2
.IX Xref "COLUMNS"
.IX Item "COLUMNS"
Holds a list of column indices (\f(CW\*(C`CID\*(C'\fR's) of the columns of this table.
.Sp
.Vb 4
\& say for @{$tables\->[43]{COLUMNS}};
\& # 186
\& # 187
\& # 188
.Ve
.RE
.RS 2
.RE
.IP COLUMN 2
.IX Xref "COLUMN"
.IX Item "COLUMN"
.Vb 1
\& my $columns = $dd\->{COLUMN};
.Ve
.Sp
This will return a reference to a list of accessible columns. The columns
that are not accessible or do not exist (anymore) have an \f(CW\*(C`undef\*(C'\fR entry.
.Sp
Each columns entry is \f(CW\*(C`undef\*(C'\fR or a hashref with these entries:
.RS 2
.IP CID 2
.IX Xref "CID"
.IX Item "CID"
Holds the COLUMN ID of the column (INTEGER). In the current implementation,
the \f(CW\*(C`CID\*(C'\fR entry is identical to the index in the list
.Sp
.Vb 2
\& say $columns\->[186]{CID};
\& # 186
.Ve
.IP NAME 2
.IX Xref "NAME"
.IX Item "NAME"
Holds the name of the column
.Sp
.Vb 2
\& say $columns\->[186]{NAME};
\& # ATHID
.Ve
.IP TID 2
.IX Xref "TID"
.IX Item "TID"
Holds the TABLE ID (INTEGER) of the table this column belongs to.
.Sp
.Vb 2
\& say $columns\->[186]{TID};
\& # 43
.Ve
.IP TNAME 2
.IX Xref "TNAME"
.IX Item "TNAME"
Holds the name of the table this column belongs to.
.Sp
.Vb 2
\& say $columns\->[186]{TNAME};
\& # DBUTIL
.Ve
.IP TYPE 2
.IX Xref "TYPE"
.IX Item "TYPE"
Holds the type (INTEGER) of the column
.Sp
.Vb 2
\& say $columns\->[186]{TYPE};
\& # 2
.Ve
.Sp
The description of the type can be found in the \f(CW\*(C`TYPE\*(C'\fR entry in \f(CW\*(C`$dd\-\*(C'\fR{TYPE}>.
.IP LENGTH 2
.IX Xref "LENGTH"
.IX Item "LENGTH"
Holds the length of the column or \f(CW0\fR if not appropriate.
.Sp
.Vb 2
\& say $columns\->[186]{LENGTH};
\& # 9
.Ve
.IP SCALE 2
.IX Xref "SCALE"
.IX Item "SCALE"
Holds the scale of the column or \f(CW0\fR if not appropriate.
.Sp
.Vb 2
\& say $columns\->[186]{SCALE};
\& # 0
.Ve
.IP NULLABLE 2
.IX Xref "NULLABLE"
.IX Item "NULLABLE"
Holds the true/false indication of this column allowing \f(CW\*(C`NULL\*(C'\fR as value
.Sp
.Vb 2
\& say $columns\->[186]{NULLABLE};
\& # 0
.Ve
.Sp
Primary keys implicitly do not allow \f(CW\*(C`NULL\*(C'\fR values
.IP DSP_LEN 2
.IX Xref "DSP_LEN"
.IX Item "DSP_LEN"
Holds, if appropriate, the display length of the column
.Sp
.Vb 2
\& say $columns\->[186]{DSP_LEN};
\& # 10
.Ve
.IP DSP_SCL 2
.IX Xref "DSP_SCL"
.IX Item "DSP_SCL"
Holds, if appropriate, the display scale of the column
.Sp
.Vb 2
\& say $columns\->[186]{DSP_SCL};
\& # 0
.Ve
.IP DSP_PICT 2
.IX Xref "DSP_PICT"
.IX Item "DSP_PICT"
Holds, if appropriate, the display format of the column
.Sp
.Vb 2
\& say $columns\->[186]{DSP_PICT};
\& #
.Ve
.IP OPTIONS 2
.IX Xref "OPTIONS"
.IX Item "OPTIONS"
Holds the internal (bitmap) representation of the options for this column.
Most, if not all, of these options have been translated to the other entries
in this hash.
.Sp
.Vb 2
\& say $columns\->[186]{OPTIONS};
\& # 16412
.Ve
.IP PKEY 2
.IX Xref "PKEY"
.IX Item "PKEY"
Holds a true/false indication of the column is a (single) primary key.
.Sp
.Vb 2
\& say $columns\->[186]{PKEY};
\& # 1
.Ve
.IP RDONLY 2
.IX Xref "RDONLY"
.IX Item "RDONLY"
Holds a true/false indication of the column is read-only.
.Sp
.Vb 2
\& say $columns\->[186]{RDONLY};
\& # 0
.Ve
.IP UNIQUE 2
.IX Xref "UNIQUE"
.IX Item "UNIQUE"
Holds a true/false indication of the column is unique.
.Sp
.Vb 2
\& say $columns\->[186]{UNIQUE};
\& # 1
.Ve
.IP LINK 2
.IX Xref "LINK"
.IX Item "LINK"
Holds the \f(CW\*(C`CID\*(C'\fR of the column this column links to through referential
integrity. This value is \f(CW\-1\fR if there is no link.
.Sp
.Vb 2
\& say $columns\->[186]{LINK};
\& # \-1
.Ve
.IP REFS 2
.IX Xref "REFS"
.IX Item "REFS"
Holds a list of column indices (\f(CW\*(C`CID\*(C'\fR's) of the columns referencing
this column in a link.
.Sp
.Vb 3
\& say for @{$columns\->[186]{REFS}};
\& # 191
\& # 202
.Ve
.IP NBTREE 2
.IX Xref "NBTREE"
.IX Item "NBTREE"
Holds the number of B\-tree indices the column participates in
.Sp
.Vb 2
\& say $columns\->[186]{NBTREE};
\& # 0
.Ve
.IP NHASH 2
.IX Xref "NHASH"
.IX Item "NHASH"
Holds the number of hash-tables the column belongs to
.Sp
.Vb 2
\& say $columns\->[186]{NHASH};
\& # 0
.Ve
.IP NPLINK 2
.IX Xref "NPLINK"
.IX Item "NPLINK"
Holds the number of links the column is parent of
.Sp
.Vb 2
\& say $columns\->[186]{NPLINK};
\& # 2
.Ve
.IP NCLINK 2
.IX Xref "NCLINK"
.IX Item "NCLINK"
Holds the number of links the column is child of (<C0> or \f(CW1\fR)
.Sp
.Vb 2
\& say $columns\->[186]{NCLINK};
\& # 0
.Ve
.Sp
If this entry holds \f(CW1\fR, the \f(CW\*(C`LINK\*(C'\fR entry holds the \f(CW\*(C`CID\*(C'\fR of the
parent column.
.RE
.RS 2
.RE
.PP
Combining all of these into describing a table, might look like done in
\&\fIexamples/describe.pl\fR
.SH TODO
.IX Header "TODO"
As this module is probably far from complete, so will the TODO list most
likely will be far from complete. More generic (test) items are mentioned
in the README in the module distribution.
.IP "Handle attributes" 4
.IX Item "Handle attributes"
Check if all documented handle (database\- and statement\-) attributes are
supported and work as expected.
.Sp
.Vb 2
\&  local $dbh\->{RaiseError}       = 0;
\&  local $sth\->{FetchHashKeyName} = "NAME";
.Ve
.IP "Statement attributes" 4
.IX Item "Statement attributes"
Allow setting and getting statement attributes. A specific example might be
.Sp
.Vb 2
\&  $sth\->{PrintError}       = 0;
\&  $sth\->{FetchHashKeyName} = "NAME_uc";
.Ve
.IP "3\-argument bind_param ()" 4
.IX Item "3-argument bind_param ()"
Investigate and implement 3\-argument versions of \f(CW$sth\fR\->bind_param ()
.IP "looks_as_number ()" 4
.IX Item "looks_as_number ()"
Investigate if looks_as_number () should be used in st_bind ().
Comments are in where it should.
.IP "Multiple open databases" 4
.IX Item "Multiple open databases"
Try finding a way to open several different Unify databases at the
same time for parallel (or at least sequential) processing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The DBI documentation in DBI, a lot of web pages, some very good, the
Perl 5 DBI Home page (http://dbi.perl.org/), other DBD modules'
documentation (DBD-Oracle is probably the most complete), the
comp.lang.perl.modules newsgroup and the dbi-users mailing list
(mailto:dbi\-users\-help@perl.org)
.SH AUTHOR
.IX Header "AUTHOR"
DBI/DBD was developed by Tim Bunce, who also developed the DBD::Oracle.
.PP
H.Merijn Brand developed the DBD::Unify extension.
.PP
Todd Zervas has given a lot of feedback and patches.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 1999\-2024 H.Merijn Brand
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
